namespace PdnCodeLab
{
    internal static class DefaultCode
    {
        internal static string Default => ProjectType.Default switch
        {
            ProjectType.ClassicEffect => ClassicEffect,
            ProjectType.GpuEffect => string.Empty,
            ProjectType.BitmapEffect => BitmapEffect,
            _ => string.Empty,
        };

        internal const string ClassicEffect = ""
            + "// Name:\r\n"
            + "// Submenu:\r\n"
            + "// Author:\r\n"
            + "// Title:\r\n"
            + "// Version:\r\n"
            + "// Desc:\r\n"
            + "// Keywords:\r\n"
            + "// URL:\r\n"
            + "// Help:\r\n"
            + "#region UICode\r\n"
            + "IntSliderControl Amount1 = 0; // [0,100] Slider 1 Description\r\n"
            + "IntSliderControl Amount2 = 0; // [0,100] Slider 2 Description\r\n"
            + "IntSliderControl Amount3 = 0; // [0,100] Slider 3 Description\r\n"
            + "#endregion\r\n"
            + "\r\n"
            + "void Render(Surface dst, Surface src, Rectangle rect)\r\n"
            + "{\r\n"
            + "    // Delete any of these lines you don't need\r\n"
            + "    Rectangle selection = EnvironmentParameters.SelectionBounds;\r\n"
            + "    int centerX = ((selection.Right - selection.Left) / 2) + selection.Left;\r\n"
            + "    int centerY = ((selection.Bottom - selection.Top) / 2) + selection.Top;\r\n"
            + "    ColorBgra primaryColor = EnvironmentParameters.PrimaryColor;\r\n"
            + "    ColorBgra secondaryColor = EnvironmentParameters.SecondaryColor;\r\n"
            + "    int brushWidth = (int)EnvironmentParameters.BrushWidth;\r\n"
            + "\r\n"
            + "    ColorBgra currentPixel;\r\n"
            + "    for (int y = rect.Top; y < rect.Bottom; y++)\r\n"
            + "    {\r\n"
            + "        if (IsCancelRequested) return;\r\n"
            + "        for (int x = rect.Left; x < rect.Right; x++)\r\n"
            + "        {\r\n"
            + "            currentPixel = src[x,y];\r\n"
            + "            // TODO: Add pixel processing code here\r\n"
            + "            // Access RGBA values this way, for example:\r\n"
            + "            // currentPixel.R = primaryColor.R;\r\n"
            + "            // currentPixel.G = primaryColor.G;\r\n"
            + "            // currentPixel.B = primaryColor.B;\r\n"
            + "            // currentPixel.A = primaryColor.A;\r\n"
            + "            dst[x,y] = currentPixel;\r\n"
            + "        }\r\n"
            + "    }\r\n"
            + "}\r\n";

        internal const string BitmapEffect = ""
            + "// Name:\r\n"
            + "// Submenu:\r\n"
            + "// Author:\r\n"
            + "// Title:\r\n"
            + "// Version:\r\n"
            + "// Desc:\r\n"
            + "// Keywords:\r\n"
            + "// URL:\r\n"
            + "// Help:\r\n"
            + "#region UICode\r\n"
            + "IntSliderControl Amount1 = 0; // [0,100] Slider 1 Description\r\n"
            + "IntSliderControl Amount2 = 0; // [0,100] Slider 2 Description\r\n"
            + "IntSliderControl Amount3 = 0; // [0,100] Slider 3 Description\r\n"
            + "#endregion\r\n"
            + "\r\n"
            + "protected override void OnRender(IBitmapEffectOutput output)\r\n"
            + "{\r\n"
            + "    using IEffectInputBitmap<ColorBgra32> sourceBitmap = Environment.GetSourceBitmapBgra32();\r\n"
            + "    using IBitmapLock<ColorBgra32> sourceLock = Environment.GetSourceBitmapBgra32().Lock(new RectInt32(0, 0, sourceBitmap.Size));\r\n"
            + "    RegionPtr<ColorBgra32> sourceRegion = sourceLock.AsRegionPtr();\r\n"
            + "    using IBitmapLock<ColorBgra32> outputLock = output.LockBgra32();\r\n"
            + "    RegionPtr<ColorBgra32> outputSubRegion = outputLock.AsRegionPtr();\r\n"
            + "    var outputRegion = outputSubRegion.OffsetView(-output.Bounds.Location);\r\n"
            + "\r\n"
            + "    // Delete any of these lines you don't need\r\n"
            + "    ColorBgra32 primaryColor = Environment.PrimaryColor;\r\n"
            + "    ColorBgra32 secondaryColor = Environment.SecondaryColor;\r\n"
            + "    int canvasCenterX = Environment.Document.Size.Width / 2;\r\n"
            + "    int canvasCenterY = Environment.Document.Size.Height / 2;\r\n"
            + "    var selection = Environment.Selection.RenderBounds;\r\n"
            + "    int selectionCenterX = (selection.Right - selection.Left) / 2 + selection.Left;\r\n"
            + "    int selectionCenterY = (selection.Bottom - selection.Top) / 2 + selection.Top;\r\n"
            + "\r\n"
            + "    // Loop through the output canvas tile\r\n"
            + "    for (int y = output.Bounds.Top; y < output.Bounds.Bottom; ++y)\r\n"
            + "    {\r\n"
            + "        if (IsCancelRequested) return;\r\n"
            + "\r\n"
            + "        for (int x = output.Bounds.Left; x < output.Bounds.Right; ++x)\r\n"
            + "        {\r\n"
            + "            // Get your source pixel\r\n"
            + "            ColorBgra32 sourcePixel = sourceRegion[x,y];\r\n"
            + "\r\n"
            + "            // TODO: Change source pixel according to some algorithm\r\n"
            + "            //sourcePixel.B = (byte)(Amount1 * 255 / 100); // Blue\r\n"
            + "            //sourcePixel.G = (byte)(Amount2 * 255 / 100); // Green\r\n"
            + "            //sourcePixel.R = (byte)(Amount3 * 255 / 100); // Red\r\n"
            + "            //sourcePixel.A = 255; // Alpha Transparency\r\n"
            + "\r\n"
            + "            // Save your pixel to the output canvas\r\n"
            + "            outputRegion[x,y] = sourcePixel;\r\n"
            + "        }\r\n"
            + "    }\r\n"
            + "}\r\n";
    }
}
